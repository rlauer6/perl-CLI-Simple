#-*- mode: makefile-gmake; -*-
# autogenerated by autoconf-template-perl v2.0.18 on Wed Nov 15 08:15:23 2023
#
# You can regenerate this file any time you add a new script to your
# project by re-running `autoconf-template-perl.pl` in the root of
# your project.
#
# * from the root of your project...
# * drop a new file in the src/main/perl/cgi-bin directory
#   as {name}.pl.in (the .in) is important!
# * re-run `autoconf-template-perl.pl --refresh`
# 
# This will create a new `includes/perl-cgi-bin.inc` file.
#
# See the README.md in the `autoconf-template-perl` project for more
# details.

# -*- mode: makefile-gmake; -*-
# This is a Makefile rule use tabs!

perlrun = $(PERL)

if RPM_BUILD_MODE
perlwc = \# 
else
perlwc = $(perlrun)
endif

@do_subst_command@

# colon separated list extra paths 
ax_perl5_extra_includes  = @ax_perl5_extra_includes@

# contains a list of paths of form -I {path} derived from above
# use in PERLINCLUDE below
ax_perl5_extra_includes_opt = @ax_perl5_extra_includes_opt@

if USING_PERL5_EXTRA_INCLUDES
PERL5_EXTRA_INCLUDES = $(ax_perl5_extra_includes_opt)
else
endif

PERLINCLUDE = \
    -I $(builddir) \
    -I $(builddir)/../lib \
    $(PERL5_EXTRA_INCLUDES) \
    -I $(perl5libdir)

%.pm: %.pm.in
	test -d "$$(dirname "$@")" || $(INSTALL) -d "$$(dirname "$@")"
	$(do_subst) $< > $@
	>&2 echo "$@"
	$(perlwc) -wc $(PERLINCLUDE)  -M$$(echo $@ | perl -np -e 's/\//\:\:/g; s/\.pm$$//;') -e 1 || { rm $@ && exit 1; }

%.pl: %.pl.in
	test -d "$$(dirname "$@")" || $(INSTALL) -d "$$(dirname "$@")"
	$(do_subst) $< > $@
	>&2 echo "WARNING: $@"
	$(perlwc) -wc $(PERLINCLUDE) $@ || { rm $@ && exit 1; }

%.cgi: %.pl
	cp $< $@

%.md : %.pm
	$(POD2MARKDOWN) < $< >$@


PERLSCRIPTS = 

GPERLSCRIPTS = $(PERLSCRIPTS:.pl.in=.pl)

GCGISCRIPTS =  $(GPERLSCRIPTS:.pl=.cgi)

apache_site_cgibin_DATA = $(GCGISCRIPTS)

$(GCGISCRIPTS): $(GPERLSCRIPTS)



ALLSCRIPTS = 

GALLSCRIPTS = $(ALLSCRIPTS:.pl.in=.pl)

PERLCRITIC_CGI = \
    $(GALLSCRIPTS:.pl=.cgi)

# We may have multiple files with the same name, so generating a man page for each 
# might create duplicate man pages. To fix this, man pages will be installed in slightly
# non-obvious way {dirname}-{file}.1man


MANPAGES = 

define MAN_PAGE_BUILD_RECIPE
	target_name="$@";\
	tname=$$(echo "$${target_name}" | sed -e 's/\.1man$$//') ;\
	"$(POD2MAN)"  $< \
	--center="$(PACKAGE)" \
	--name="$${tname}" \
	--release=$(PACKAGE)-$(VERSION) \
	--section=1man > "$${target_name}" || true
endef

%.3man : %.pm
	$(MAN_PAGE_BUILD_RECIPE)

%.1man : %.pl
	$(MAN_PAGE_BUILD_RECIPE)

%.1man : %.cgi
	$(MAN_PAGE_BUILD_RECIPE)

%.tman : %.pl
	$(MAN_PAGE_BUILD_RECIPE)

%.tman : %.cgi
	$(MAN_PAGE_BUILD_RECIPE)

TEMP_MANPAGES = $(GALLSCRIPTS:.pl=.tman)

GMANPAGES = $(MANPAGES:.pl.in=.1man)

$(GMANPAGES): $(TEMP_MANPAGES)
	set -x; \
	src=$(subst -,/,$@); \
	tman=$$(dirname $$src)/$$(basename $$src .1man).tman; \
	if test -e $$tman; then \
	  cp $$tman $@; \
	else \
	  cp $$(basename $@ .1man).tman $@; \
	fi

G1MANPAGES = $(GMANPAGES:.tman=.1man)


1


